[user]
	name = jahson
	email = jjahson@gmail.com
[core]
	editor = vim
	autocrlf = input
	safecrlf = true
	excludesfile = ~/.gitignore_global
[diff]
	tool = vimdiff
[merge]
	tool = vimdiff
[color]
	ui = auto
	status = auto
	branch = auto
	interactive = auto
	diff = auto
[alias]
	ad = add
	bd = branch -d
	ci = commit
	di = diff
	cb = checkout -b
	cm = checkout master
	last = cat-file commit HEAD
	ls = ls-files
	merge = merge --no-ff
	mn = merge --no-ff
	ps = push origin master
	pl = pull origin master
	st = status
	type = cat-file -t
	dump = cat-file -p
	unstage = reset HEAD
	hist = log --pretty=format:\"%C(yellow)%h%Creset [%ad, %an] %s%Cred%d%Creset\" --graph --date=short
	# Show status and diff on dirty submodules
	subdiff = !"git submodule foreach --recursive --quiet '[ \"$(git status -s)\" ] && echo \"$name\" && git status -s && git diff --unified=1 || :'"
	# Pull all submodules
	subpull = !"git submodule foreach git pull"
	# Update all submodules
	subupdate = !"git submodule sync && git submodule update --init --recursive"
	# Checkout master branch of all submodules
	subcheckout = !"git submodule foreach git checkout master"
	# Reset all submodules
	subreset = !"git submodule foreach --recursive git checkout -- . && git submodule foreach --recursive git clean -f"
	# Add modified files to previous commit
	oops = !"git add -A -v && git commit --amend -C HEAD"
	# Search for a given string in all patches and print commit messages
	# example: search for any commit that adds or removes string "foobar"
	# git searchcommits foobar
	# example: search commits for string "foobar" in directory src/lib
	# git searchcommits foobar src/lib
	# example: search commits for "foobar", print full diff of commit with 1 line context
	# git searchcommits foobar --pickaxe-all -U1 src/lib
	searchcommits = "!f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""
[branch "master"]
	remote = origin
	merge = refs/heads/master

;  vim: set ts=4 sw=4 noexpandtab:
